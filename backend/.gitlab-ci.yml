#
cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository  

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  JAVA_OPTS: -XX:MaxRAMPercentage=90

stages:
  - build
  - test
  - release
  - deploy 
  - notify  

include:
  - template: Security/SAST.gitlab-ci.yml

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true
  variables:
    SPRING_FLYWAY_ENABLED: "false"      

spotbugs-sast:
  stage: test
  needs:
    - build 
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    SPRING_FLYWAY_ENABLED: "false"
  

    
release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION



deploy-backend:
  stage: deploy
  image: docker:24.0.7-alpine3.19
  before_script:
    - apk add openssh-client bash gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts  
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - echo "VERSION=${VERSION}" >> deploy.env
    - echo "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}" >> deploy.env
    - echo "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}" >> deploy.env
    - echo "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}" >> deploy.env
    - echo "REPORTS_MONGODB_URI="mongodb://${MB_USER}:${MB_PASSWORD}@${MB_HOST}:27018/${MD_BD}?tls=true"" >> deploy.env
    - echo "REPORT_PATH=/var/www-data/htdocs" >> deploy.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      if [ "$(docker --context remote ps -f name=sausage-store-backend-blue --format {{.Names}})" ]; then 
      NEW="green" 
      OLD="blue" 
      else 
      NEW="blue" 
      OLD="green" 
      fi
    - docker --context remote compose --env-file deploy.env up backend-$NEW -d --pull "always" --force-recreate
    - |
      while [ "$(docker --context remote ps -f name=sausage-store-backend-$NEW -f health=healthy --format {{.Names}})" == "" ]; do 
      sleep 5
      done
    - docker --context remote compose down backend-$OLD     


      

telegram-notification-backend:
  stage: notify
  only:
    changes:
      - backend/**/*
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"-1002073237519\", \"text\": \"Дмитрий собрал бэк и провел статический анализ кода https://gitlab.praktikum-services.ru/std-ext-007-22/sausage-store/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=$CI_JOB_NAME\" }" https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage '
  needs:
    - deploy-backend